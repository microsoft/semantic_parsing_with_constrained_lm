%import common.WS
%import common.WORD
%import common.ESCAPED_STRING

%ignore WS

start: sync_rule
    | macro_rule
    | utterance_rule

start_for_test: sync_rule
    | macro_rule
    | utterance_rule
    | plan_expansion

sync_rule: rule entity_annotation? "->" utterance_expansions "," plan_expansion
macro_rule: macro_def "2>" plan_expansion
utterance_rule: rule "1>" utterance_expansions
entity_annotation: ":" without_space? _schema_name

utterance_expansions: utterance_expansion ("|" utterance_expansion)*

plan_expansion: (plan_token | macro_apply)+
utterance_expansion: utterance_token+

utterance_token: terminal_with_space
    | optional_terminal_with_space
    | nonterminal
    | optional_nonterminal
    | empty
    | regex_with_space

plan_token: terminal_without_space
    | optional_terminal_without_space
    | nonterminal
    | optional_nonterminal
    | empty
    | regex_without_space

terminal_with_space: without_space? terminal_string
optional_terminal_with_space: without_space? terminal_string "?"

terminal_without_space: terminal_string
optional_terminal_without_space: without_space? terminal_string "?"

without_space: "!"

nonterminal: _name
rule: _name
optional_nonterminal: _name "?"

macro_def: _name "(" (_name ("," _name)* ","?)? ")"
    | _name
macro_apply: _name "(" (_macro_arg ("," _macro_arg)* ","?)? ")"
_macro_arg: nonterminal | terminal_without_space | macro_apply | empty

_name: /[a-zA-Z][_a-zA-Z0-9]*/
regex_with_space: without_space? /\/[^\/]+\//
regex_without_space: /\/[^\/]+\//
_schema_name: /[A-Z][a-zA-Z]*/

?terminal_string: ESCAPED_STRING

empty: "#e"
